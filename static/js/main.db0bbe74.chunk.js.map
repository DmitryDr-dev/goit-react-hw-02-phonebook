{"version":3,"sources":["components/AddContactForm/AddContactForm.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Section/Section.jsx","App.js","index.js"],"names":["AddContactForm","nameInputId","uuidv4","telInputId","handleInputChange","e","currentTarget","name","value","setState","handleSubmit","preventDefault","props","state","newContact","id","onSubmit","resetState","number","this","htmlFor","type","pattern","title","required","onChange","Component","ContactListItem","contactName","contactNumber","ContactList","contacts","className","map","Filter","filterInputId","Section","children","App","formSubmitHandler","prevState","normalizedName","toLowerCase","find","contact","alert","changeFilter","filter","getFilteredContacts","normalizedFilter","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db0bbe74.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass AddContactForm extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      id: '',\r\n      name: '',\r\n      number: '',\r\n    };\r\n  }\r\n\r\n  // unique ids for name & tel\r\n  nameInputId = uuidv4();\r\n  telInputId = uuidv4();\r\n\r\n  // method to update state\r\n  handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // method to send current state back to parent\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { props, state } = this;\r\n\r\n    const newContact = { ...state, id: uuidv4() };\r\n\r\n    props.onSubmit(newContact);\r\n  };\r\n\r\n  // method to clear state\r\n  resetState = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { handleSubmit, handleInputChange, nameInputId, telInputId } = this;\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor={nameInputId}>Имя</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          id={nameInputId}\r\n          onChange={handleInputChange}\r\n        />\r\n        <label htmlFor={telInputId}>Телефон</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          id={telInputId}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button type=\"submit\">Add Contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContactForm;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction ContactListItem({ contactName, contactNumber }) {\r\n  return (\r\n    <span>\r\n      {contactName}: {contactNumber}\r\n    </span>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  contactName: PropTypes.string.isRequired,\r\n  contactNumber: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\n\r\nfunction ContactList({ contacts }) {\r\n  return (\r\n    <ul className=\"contacts\">\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className=\"contacts__item\">\r\n            <ContactListItem contactName={name} contactNumber={number} />;\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nfunction Filter({ value, onChange }) {\r\n  const filterInputId = uuidv4();\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor={filterInputId}>Filter by Name</label>\r\n      <input type=\"text\" value={value} onChange={onChange} id={filterInputId} />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","function Section({ title, children }) {\r\n  return (\r\n    <section className=\"section\">\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import { Component } from 'react';\n\nimport AddContactForm from './components/AddContactForm/AddContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport Section from './components/Section/Section';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // should be empty array\n    // ! use several contacts to check functions\n    this.state = {\n      contacts: [\n        { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n        { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n        { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n        { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n      ],\n      filter: '',\n    };\n  }\n\n  // method to process data sent on form submission\n  formSubmitHandler = newContact => {\n    this.setState(prevState => {\n      const { contacts } = prevState;\n      const normalizedName = newContact.name.toLowerCase();\n\n      if (\n        contacts.find(contact => contact.name.toLowerCase() === normalizedName)\n      ) {\n        alert(`${newContact.name} already exists!`);\n        return;\n      }\n\n      return {\n        contacts: [...prevState.contacts, newContact],\n      };\n    });\n  };\n\n  // method to detect changes in Filter input\n  changeFilter = e => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { state, formSubmitHandler, getFilteredContacts, changeFilter } =\n      this;\n    const { filter } = state;\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <AddContactForm onSubmit={formSubmitHandler} />\n        <Section title=\"Contacts\">\n          <ContactList contacts={getFilteredContacts()} />\n          <Filter value={filter} onChange={changeFilter} />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}