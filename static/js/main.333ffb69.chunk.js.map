{"version":3,"sources":["components/AddContactForm/AddContactForm.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Section/Section.jsx","App.js","index.js"],"names":["AddContactForm","nameInputId","uuidv4","telInputId","handleInputChange","e","currentTarget","name","value","setState","handleSubmit","preventDefault","props","state","newContact","id","onSubmit","resetState","number","this","htmlFor","type","pattern","title","required","onChange","Component","ContactListItem","contactName","contactNumber","onDelete","onClick","ContactList","contacts","className","map","Filter","filterInputId","Section","children","App","formSubmitHandler","prevState","normalizedName","toLowerCase","find","contact","alert","onDeleteContact","contactId","filter","changeFilter","getFilteredContacts","normalizedFilter","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAuFeA,E,kDAnFb,aAAe,IAAD,8BACZ,gBAUFC,YAAcC,cAXA,EAYdC,WAAaD,cAZC,EAedE,kBAAoB,SAAAC,GAClB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACGF,EAAOC,KAnBE,EAwBdE,aAAe,SAAAL,GACbA,EAAEM,iBAEF,qBAAQC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAETC,EAAU,2BAAQD,GAAR,IAAeE,GAAIb,gBAEnCU,EAAMI,SAASF,GAEf,EAAKG,cAjCO,EAqCdA,WAAa,WACX,EAAKR,SAAS,CACZF,KAAM,GACNW,OAAQ,MArCV,EAAKL,MAAQ,CACXE,GAAI,GACJR,KAAM,GACNW,OAAQ,IANE,E,0CA4Cd,WACE,IACER,EAKES,KALFT,aACAN,EAIEe,KAJFf,kBACAH,EAGEkB,KAHFlB,YACAE,EAEEgB,KAFFhB,WAJF,EAMIgB,KADFN,MAASN,EALX,EAKWA,KAAMW,EALjB,EAKiBA,OAGjB,OACE,uBAAMF,SAAUN,EAAhB,UACE,uBAAOU,QAASnB,EAAhB,gCACA,uBACEoB,KAAK,OACLd,KAAK,OACLe,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRT,GAAId,EACJO,MAAOD,EACPkB,SAAUrB,IAEZ,uBAAOgB,QAASjB,EAAhB,wDACA,uBACEkB,KAAK,MACLd,KAAK,SACLe,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRT,GAAIZ,EACJK,MAAOU,EACPO,SAAUrB,IAEZ,wBAAQiB,KAAK,SAAb,gC,GA9EqBK,aCedC,MAhBf,YAAwE,IAA7CZ,EAA4C,EAA5CA,GAAIa,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SACzD,OACE,iCACGF,EADH,KACkBC,EAChB,wBAAQR,KAAK,SAASU,QAAS,kBAAMD,EAASf,IAA9C,wBCwBSiB,MA3Bf,YAA8C,IAAvBC,EAAsB,EAAtBA,SAAUH,EAAY,EAAZA,SAC/B,OACE,oBAAII,UAAU,WAAd,SACGD,EAASE,KAAI,YAA2B,IAAxBpB,EAAuB,EAAvBA,GAAIR,EAAmB,EAAnBA,KAAMW,EAAa,EAAbA,OACzB,OACE,oBAAagB,UAAU,iBAAvB,SACE,cAAC,EAAD,CACEN,YAAarB,EACbsB,cAAeX,EACfH,GAAIA,EACJe,SAAUA,KALLf,SCUJqB,MAhBf,YAAsC,IAApB5B,EAAmB,EAAnBA,MAAOiB,EAAY,EAAZA,SACjBY,EAAgBnC,cAEtB,OACE,gCACE,uBAAOkB,QAASiB,EAAhB,4BACA,uBAAOhB,KAAK,OAAOb,MAAOA,EAAOiB,SAAUA,EAAUV,GAAIsB,QCChDC,MATf,YAAuC,IAApBf,EAAmB,EAAnBA,MAAOgB,EAAY,EAAZA,SACxB,OACE,0BAASL,UAAU,UAAnB,UACGX,GAAS,6BAAKA,IACdgB,MC4FQC,E,kDAxFb,aAAe,IAAD,8BACZ,gBAgBFC,kBAAoB,SAAA3B,GAClB,EAAKL,UAAS,SAAAiC,GACZ,IAAMC,EAAiB7B,EAAWP,KAAKqC,cAEvC,IACEF,EAAUT,SAASY,MACjB,SAAAC,GAAO,OAAIA,EAAQvC,KAAKqC,gBAAkBD,KAO9C,MAAO,CACLV,SAAS,GAAD,mBAAMS,EAAUT,UAAhB,CAA0BnB,KALlCiC,MAAM,GAAD,OAAIjC,EAAWP,KAAf,yBA1BG,EAqCdyC,gBAAkB,SAAAC,GAChB,EAAKxC,UAAS,SAAAiC,GACZ,MAAO,CACLT,SAAUS,EAAUT,SAASiB,QAC3B,SAAAJ,GAAO,OAAIA,EAAQ/B,KAAOkC,UAzCpB,EAgDdE,aAAe,SAAA9C,GACb,EAAKI,SAAS,CACZyC,OAAQ7C,EAAEC,cAAcE,SAlDd,EAuDd4C,oBAAsB,WACpB,MAA6B,EAAKvC,MAA1BoB,EAAR,EAAQA,SACFoB,EADN,EAAkBH,OACcN,cAEhC,OAAOX,EAASiB,QAAO,SAAAJ,GAAO,OAC5BA,EAAQvC,KAAKqC,cAAcU,SAASD,OAvDtC,EAAKxC,MAAQ,CACXoB,SAAU,CACR,CAAElB,GAAI,OAAQR,KAAM,gBAAiBW,OAAQ,aAC7C,CAAEH,GAAI,OAAQR,KAAM,iBAAkBW,OAAQ,aAC9C,CAAEH,GAAI,OAAQR,KAAM,gBAAiBW,OAAQ,aAC7C,CAAEH,GAAI,OAAQR,KAAM,iBAAkBW,OAAQ,cAEhDgC,OAAQ,IAZE,E,0CAgEd,WACE,IACWA,EAIP/B,KAJFN,MAASqC,OACTT,EAGEtB,KAHFsB,kBACAW,EAEEjC,KAFFiC,oBACAD,EACEhC,KADFgC,aAGF,OACE,gCACE,2CACA,cAAC,EAAD,CAAgBnC,SAAUyB,IAC1B,eAAC,EAAD,CAASlB,MAAM,WAAf,UACE,cAAC,EAAD,CACEU,SAAUmB,IACVtB,SAAUX,KAAK6B,kBAEjB,cAAC,EAAD,CAAQxC,MAAO0C,EAAQzB,SAAU0B,c,GAlFzBzB,aCFlB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.333ffb69.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass AddContactForm extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      id: '',\r\n      name: '',\r\n      number: '',\r\n    };\r\n  }\r\n\r\n  // unique ids for name & tel\r\n  nameInputId = uuidv4();\r\n  telInputId = uuidv4();\r\n\r\n  // method to update state\r\n  handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // method to send current state back to parent\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { props, state } = this;\r\n\r\n    const newContact = { ...state, id: uuidv4() };\r\n\r\n    props.onSubmit(newContact);\r\n\r\n    this.resetState();\r\n  };\r\n\r\n  // method to clear state\r\n  resetState = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      handleSubmit,\r\n      handleInputChange,\r\n      nameInputId,\r\n      telInputId,\r\n      state: { name, number },\r\n    } = this;\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor={nameInputId}>Имя</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          id={nameInputId}\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n        <label htmlFor={telInputId}>Телефон</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          id={telInputId}\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n        <button type=\"submit\">Add Contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContactForm;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction ContactListItem({ id, contactName, contactNumber, onDelete }) {\r\n  return (\r\n    <span>\r\n      {contactName}: {contactNumber}\r\n      <button type=\"button\" onClick={() => onDelete(id)}>\r\n        Delete\r\n      </button>\r\n    </span>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  contactName: PropTypes.string.isRequired,\r\n  contactNumber: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactListItem from './ContactListItem/ContactListItem';\r\n\r\nfunction ContactList({ contacts, onDelete }) {\r\n  return (\r\n    <ul className=\"contacts\">\r\n      {contacts.map(({ id, name, number }) => {\r\n        return (\r\n          <li key={id} className=\"contacts__item\">\r\n            <ContactListItem\r\n              contactName={name}\r\n              contactNumber={number}\r\n              id={id}\r\n              onDelete={onDelete}\r\n            />\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nfunction Filter({ value, onChange }) {\r\n  const filterInputId = uuidv4();\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor={filterInputId}>Filter by Name</label>\r\n      <input type=\"text\" value={value} onChange={onChange} id={filterInputId} />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","function Section({ title, children }) {\r\n  return (\r\n    <section className=\"section\">\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import { Component } from 'react';\n\nimport AddContactForm from './components/AddContactForm/AddContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport Section from './components/Section/Section';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    // should be empty array\n    // ! use several contacts to check functions\n    this.state = {\n      contacts: [\n        { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n        { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n        { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n        { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n      ],\n      filter: '',\n    };\n  }\n\n  // method to process data sent on form submission\n  formSubmitHandler = newContact => {\n    this.setState(prevState => {\n      const normalizedName = newContact.name.toLowerCase();\n\n      if (\n        prevState.contacts.find(\n          contact => contact.name.toLowerCase() === normalizedName,\n        )\n      ) {\n        alert(`${newContact.name} already exists!`);\n        return;\n      }\n\n      return {\n        contacts: [...prevState.contacts, newContact],\n      };\n    });\n  };\n\n  //\n  onDeleteContact = contactId => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(\n          contact => contact.id !== contactId,\n        ),\n      };\n    });\n  };\n\n  // method to detect changes in Filter input\n  changeFilter = e => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  //\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const {\n      state: { filter },\n      formSubmitHandler,\n      getFilteredContacts,\n      changeFilter,\n    } = this;\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <AddContactForm onSubmit={formSubmitHandler} />\n        <Section title=\"Contacts\">\n          <ContactList\n            contacts={getFilteredContacts()}\n            onDelete={this.onDeleteContact}\n          />\n          <Filter value={filter} onChange={changeFilter} />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}